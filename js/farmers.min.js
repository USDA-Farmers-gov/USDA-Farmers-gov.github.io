(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Step =
/*#__PURE__*/
function () {
  function Step(step, stepper) {
    var _this = this;

    _classCallCheck(this, Step);

    this.data = _objectSpread({}, step);
    this.results = [];
    this.domElement = '';
    this.stepper = stepper;
    this.stepTypes = {
      'checkbox': {
        make: function make(stepObj) {
          var checkboxMarkup = function checkboxMarkup(selection) {
            var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'medium-4';
            return "\n              <div class=\"".concat(width, "\">\n                <label class=\"checkbox-card-label with-image\" for=\"").concat(selection.name, "\" tabindex=\"0\">\n                  <div class=\"cb-img-card-top\">\n                    <h2>").concat(selection.text, "</h2>\n                  </div>\n                  <div class=\"cb-img-card-bottom\">\n                    <input class=\"checkbox-card-input\" id=\"").concat(selection.name, "\" type=\"checkbox\">\n                    <span class=\"cb-icon\"></span>\n                  </div>\n                </label>\n              </div>\n            ");
          };

          return stepObj.selections.map(function (item) {
            return checkboxMarkup(item, stepObj.selection_width_class);
          }).join(',').split(',').join('');
        },
        checkboxNext: function checkboxNext(stepObj) {
          var div = document.createElement('div');
          var btn = document.createElement('button');
          var tmp = document.createElement('span');
          div.classList.add('next-btn');
          btn.classList.add('btn');
          btn.innerText = 'Next';
          btn.addEventListener('click', _this.stepComplete());
          div.appendChild(btn);
          tmp.appendChild(div);
          return div;
        }
      },
      'radio': {
        make: function make(stepObj) {
          var radioMarkup = function radioMarkup(selection) {
            var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'medium-3';
            return "\n              <div class=\"".concat(width, "\">\n                <label tabindex=\"0\" for=\"").concat(selection.id, "\" class=\"radio-card-label with-image\">\n                  <div class=\"radio-img-card-top\">\n                    <h2>").concat(selection.text, "</h2>\n                  </div>\n                  <div class=\"radio-img-card-bottom\">\n                    <input type=\"radio\" id=\"").concat(selection.id, "\" class=\"radio-card-input\" name=\"").concat(selection.name, "\" title=\"Card Radio\" tabindex=\"0\">\n                    <span class=\"radio-icon\"></span>\n                  </div>\n                </label>\n              </div>\n            ");
          };

          return stepObj.selections.map(function (item) {
            return radioMarkup(item, stepObj.selection_width_class);
          }).join(',').split(',').join('');
        }
      },
      'select': {
        make: function make(stepObj) {
          var selectMarkup = function selectMarkup(selection) {
            var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'medium-3';
            return "\n              <div class=\"".concat(width, "\">\n                <label for=\"").concat(selection.id, "\" style=\"font-size:1.6rem;line-height:2.4rem;height:2.4rem;\">").concat(stepObj.label_text, "</label>\n                <select id=\"").concat(selection.id, "\" name=\"").concat(selection.name, "\">\n                  <option></option>\n                  ").concat(selection.options.map(function (opt) {
              return '<option value=' + opt.value + '>' + opt.text || opt.value + '</option>';
            }), "\n                </select>\n              </div>\n            ");
          };

          return stepObj.selections.map(function (item) {
            return selectMarkup(item, stepObj.selection_width_class);
          }).join(',').split(',').join('');
        }
      },
      'final': {
        make: function make(stepObj) {
          var finishMarkup = function finishMarkup(selection) {
            var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'medium-3';
            return "\n              <div class=\"".concat(width, "\">\n                <button class=\"btn\">").concat(selection.text, "</button>\n              </div>\n            ");
          };

          return stepObj.selections.map(function (item) {
            return finishMarkup(item, stepObj.selection_width_class);
          }).join(',').split(',').join('');
        }
      }
    };
  } // TODO: callback for when stepper finishes?


  _createClass(Step, [{
    key: "stepComplete",
    value: function stepComplete(thing) {}
  }, {
    key: "rebuildDomElement",
    value: function rebuildDomElement() {
      if (!!this.stepTypes[this.data.type]) {
        var html = "\n      <div ".concat(this.data.type == 'radio' ? 'role="radiogroup"' : 'role="group"', " aria-label=\"step-").concat(this.data.step, "\" class=\"vertical-step\">\n        <div class=\"vertical-step-left\">\n          <span class=\"step-icon\">").concat(this.data.icon ? this.data.icon : this.data.step, "</span>\n        </div>\n        <div class=\"vertical-step-content\">\n          <div class=\"vertical-step-header\">\n            <h2>").concat(this.data.title, "</h2>\n            ").concat(this.data.subtitle ? '<p>' + this.data.subtitle + '</p>' : '', "\n          </div>\n          <div class=\"vertical-step-selections\">\n          ").concat(this.stepTypes[this.data.type].make(this.data), "\n          </div>\n        </div>\n      </div>\n      ");
        var template = document.createElement('template');
        template.innerHTML = html.trim();

        if (this.data.type == 'checkbox') {
          template.content.firstChild.querySelector('.vertical-step-content:last-child').appendChild(this.stepTypes[this.data.type].checkboxNext(this.data));
        }

        if (this.data.type == 'select') {
          var tmp = template.content.firstChild.querySelector('.vertical-step-content:last-child');
          tmp.querySelector('select').addEventListener('change', this.data.changeHandler);
        }

        this.domElement = template.content.firstChild;
        this.domElement.addEventListener('click', this.data.clickHandler);
        return template.content.firstChild;
      }
    }
  }, {
    key: "markup",
    value: function markup() {
      if (this.domElement) {
        return this.domElement;
      } else {
        if (!!this.stepTypes[this.data.type]) {
          var html = "\n        <div ".concat(this.data.type == 'radio' ? 'role="radiogroup"' : 'role="group"', " aria-label=\"step-").concat(this.data.step, "\" class=\"vertical-step ").concat(this.data.step == this.stepper.steps.length ? 'last-step' : '', "\">\n          <div class=\"vertical-step-left\">\n            <span class=\"step-icon\">").concat(this.data.icon ? this.data.icon : this.data.step, "</span>\n          </div>\n          <div class=\"vertical-step-content\">\n            <div class=\"vertical-step-header\">\n              <h2>").concat(this.data.title, "</h2>\n              <p>").concat(this.data.subtitle, "</p>\n            </div>\n            <div class=\"vertical-step-selections\">\n            ").concat(this.stepTypes[this.data.type].make(this.data), "\n            </div>\n          </div>\n        </div>\n        ");
          var template = document.createElement('template');
          template.innerHTML = html.trim();

          if (this.data.type == 'checkbox') {
            template.content.firstChild.querySelector('.vertical-step-content:last-child').appendChild(this.stepTypes[this.data.type].checkboxNext(this.data));
          }

          if (this.data.type == 'select') {
            var tmp = template.content.firstChild.querySelector('.vertical-step-content:last-child');
            tmp.querySelector('select').addEventListener('change', this.data.changeHandler);
          }

          this.domElement = template.content.firstChild;
          this.domElement.addEventListener('click', this.data.clickHandler);
          return template.content.firstChild;
        }
      }
    }
  }]);

  return Step;
}();

exports["default"] = Step;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Step = _interopRequireDefault(require("./Step"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Stepper =
/*#__PURE__*/
function () {
  function Stepper(rootElement, name, stepsArray) {
    var _this = this;

    _classCallCheck(this, Stepper);

    this.sRoot = document.querySelector(rootElement);
    this.steps = stepsArray.map(function (step) {
      return new _Step["default"](step, _this);
    });
    this.$form = document.createElement('form');
    this.$form.setAttribute('id', name);
    this.$form.addEventListener('submit', function (e) {
      e.preventDefault();
    });
    this.currentStep = this.steps[0].data.step;
    this.renderedSteps = [this.steps[0]];
  }

  _createClass(Stepper, [{
    key: "nextStep",
    value: function nextStep(opt) {
      var _this2 = this;

      this.currentStep = opt.step + 1;
      var nextRenderedStep = this.steps.filter(function (step) {
        return step.data.step == _this2.currentStep;
      })[0];

      if (nextRenderedStep) {
        nextRenderedStep.rebuildDomElement();
        this.renderedSteps.push(nextRenderedStep);
        this.renderedSteps = this.renderedSteps.filter(function (stp) {
          return stp.data.step <= nextRenderedStep.data.step;
        });
        this.render();
      } else {// TODO: Handle no next step object
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var temp = document.createElement('div');
      this.$form.innerHTML = '';
      this.renderedSteps.map(function (step) {
        return step.markup();
      }).map(function (markup) {
        if (!!markup) {
          _this3.$form.appendChild(markup);
        }
      });
      this.sRoot.innerHTML = '';
      this.sRoot.appendChild(this.$form);

      if (this.renderedSteps.length > 1) {
        this.sRoot.querySelector('.vertical-step:last-child').scrollIntoView({
          behavior: "smooth"
        });
      }

      return this.sRoot;
    }
  }, {
    key: "formData",
    get: function get() {
      return _toConsumableArray(this.$form.elements).filter(function (el) {
        return 'checked' in el ? el.checked : el.value;
      });
    }
  }, {
    key: "formDataJson",
    get: function get() {
      var preJson = this.formData.map(function (el) {
        var getStepElement = function getStepElement(element) {
          return element.classList.contains('vertical-step') ? element : getStepElement(element.parentElement);
        };

        var stepElement = {
          stuff: getStepElement(el.labels[0].parentElement)
        };

        if (!!Object.keys(stepElement).length) {
          return {
            step: stepElement.stuff.getAttribute('aria-label'),
            inputs: {
              name: el.id || el.name,
              val: el.checked || el.value
            }
          };
        }
      });
      var mem = {};
      preJson.map(function (obj) {
        obj.step in mem ? mem[obj.step].push(obj.inputs) : mem[obj.step] = [obj.inputs];
      });
      preJson = JSON.stringify(mem);
      return preJson;
    }
  }]);

  return Stepper;
}();

exports["default"] = Stepper;

},{"./Step":1}],3:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

window.addEventListener('load', function () {
  function panelWidthFix(accordionBlock, accordionTarget) {
    var targetPanel = accordionTarget.nextSibling.nextElementSibling;
    var offset = (accordionTarget.parentElement.offsetLeft - accordionBlock.offsetLeft) * -1 + 'px';
    targetPanel.style.marginLeft = offset;
    targetPanel.style.width = "".concat(accordionBlock.offsetWidth - 17, "px");
  }

  Array.prototype.slice.call(document.querySelectorAll('.Accordion')).forEach(function (accordion) {
    // Allow for multiple accordion sections to be expanded at the same time
    var allowMultiple = false; // we don't want multiple accordion sections to be expanded at the same time
    // Allow for each toggle to both open and close individually

    var allowToggle = accordion.hasAttribute('data-allow-toggle'); // Create the array of toggle elements for the accordion group

    var triggers = _toConsumableArray(accordion.querySelectorAll('.Accordion-trigger'));

    var panels = _toConsumableArray(accordion.querySelectorAll('.Accordion-panel'));

    triggers.map(function (target) {
      panelWidthFix(accordion, target);
    });
    accordion.addEventListener('click', function (event) {
      var target = event.target;
      target.parentElement.parentElement.classList.contains('Accordion-trigger') ? target = target.parentElement.parentElement : target.parentElement.classList.contains('Accordion-trigger') ? target = target.parentElement : ''; // Kind of a hack to set target element correctly

      if (target.classList.contains('Accordion-trigger')) {
        // Check if the current toggle is expanded.
        var isExpanded = target.getAttribute('aria-expanded') == 'true';
        var active = accordion.querySelector('[aria-expanded="true"]'); // without allowMultiple, close the open accordion

        if (!allowMultiple && active && active !== target) {
          // Set the expanded state on the triggering element
          active.setAttribute('aria-expanded', 'false'); // Hide the accordion sections, using aria-controls to specify the desired section

          document.getElementById(active.getAttribute('aria-controls')).setAttribute('hidden', ''); // When toggling is not allowed, clean up disabled state

          if (!allowToggle) {
            active.removeAttribute('aria-disabled');
          }
        }

        if (!isExpanded) {
          // Set the expanded state on the triggering element
          target.setAttribute('aria-expanded', 'true'); // Hide the accordion sections, using aria-controls to specify the desired section

          document.getElementById(target.getAttribute('aria-controls')).removeAttribute('hidden'); // If toggling is not allowed, set disabled state on trigger

          if (!allowToggle) {
            target.setAttribute('aria-disabled', 'true');
          }
        } else if (allowToggle && isExpanded) {
          // Set the expanded state on the triggering element
          target.setAttribute('aria-expanded', 'false'); // Hide the accordion sections, using aria-controls to specify the desired section

          document.getElementById(target.getAttribute('aria-controls')).setAttribute('hidden', '');
        }

        event.preventDefault();
      }

      var activePanel = panels.filter(function (el) {
        return !el.hasAttribute('hidden');
      })[0];
      activePanel ? activePanel.scrollIntoView({
        behavior: "smooth"
      }) : '';
    }); // Bind keyboard behaviors on the main accordion container

    accordion.addEventListener('keydown', function (event) {
      var target = event.target;
      var key = event.which.toString();
      var isExpanded = target.getAttribute('aria-expanded') == 'true';
      var allowToggle = allowMultiple ? allowMultiple : accordion.hasAttribute('data-allow-toggle'); // 33 = Page Up, 34 = Page Down

      var ctrlModifier = event.ctrlKey && key.match(/33|34/); // Is this coming from an accordion header?

      if (target.classList.contains('Accordion-trigger')) {
        // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations
        // 38 = Up, 40 = Down
        if (key.match(/38|40/) || ctrlModifier) {
          var index = triggers.indexOf(target);
          var direction = key.match(/34|40/) ? 1 : -1;
          var length = triggers.length;
          var newIndex = (index + length + direction) % length;
          triggers[newIndex].focus();
          event.preventDefault();
        } else if (key.match(/35|36/)) {
          // 35 = End, 36 = Home keyboard operations
          switch (key) {
            // Go to first accordion
            case '36':
              triggers[0].focus();
              break;
            // Go to last accordion

            case '35':
              triggers[triggers.length - 1].focus();
              break;
          }

          event.preventDefault();
        } else if (key.match(/32|13/)) {
          // 13 = Enter, 32 = Space keyboard operations
          event.preventDefault();
          target.click();
        }
      }
    }); // These are used to style the accordion when one of the buttons has focus

    accordion.querySelectorAll('.Accordion-trigger').forEach(function (trigger) {
      trigger.addEventListener('focus', function (event) {
        // accordion.classList.add('focus');
        event.target.classList.add('focus');
      });
      trigger.addEventListener('blur', function (event) {
        accordion.classList.remove('focus');
        event.target.classList.remove('focus');
      });
    }); // Minor setup: will set disabled state, via aria-disabled, to an
    // expanded/ active accordion which is not allowed to be toggled close

    if (!allowToggle) {
      // Get the first expanded/ active accordion
      var expanded = accordion.querySelector('[aria-expanded="true"]'); // If an expanded/ active accordion is found, disable

      if (expanded) {
        expanded.setAttribute('aria-disabled', 'true');
      }
    }
  });
  window.addEventListener('resize', function () {
    _toConsumableArray(document.querySelectorAll('.Accordion')).map(function (accordion) {
      _toConsumableArray(accordion.querySelectorAll('.Accordion-trigger')).map(function (target) {
        panelWidthFix(accordion, target);
      });
    });
  });

  var accordion_card_array = _toConsumableArray(document.querySelectorAll('.Card-Accordion'));

  accordion_card_array.map(function (cardAccordion) {
    cardAccordion.addEventListener('click', function (evt) {
      var target = evt.target;
      target.parentElement.parentElement.parentElement.classList.contains('Card-Accordion') ? target = target.parentElement.parentElement.parentElement : target.parentElement.parentElement.classList.contains('Card-Accordion') ? target = target.parentElement.parentElement : target.parentElement.classList.contains('Card-Accordion') ? target = target.parentElement : '';
      target.querySelector('.card-accordion-content').classList.toggle('show');
      target.querySelector('.card-accordion-toggle > a').classList.toggle('card-accordion-show-less');

      if (target.querySelector('.card-accordion-content').classList.contains('show')) {
        target.querySelector('.card-accordion-content.show').scrollIntoView({
          behavior: "smooth"
        });
        target.querySelector('.card-accordion-toggle > a').innerHTML = 'Show Less';
      } else {
        target.querySelector('.card-accordion-toggle > a').innerHTML = 'Show More';
      }
    });
    cardAccordion.addEventListener('keydown', function (event) {
      var target = event.target;
      var key = event.which.toString();

      if (key.match(/32|13/)) {
        event.preventDefault();
        cardAccordion.click();
      }
    });
  });
});

},{}],4:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

window.addEventListener('load', function () {
  document.addEventListener('click', function (evt) {
    var cb_labels = _toConsumableArray(document.querySelectorAll('label.checkbox-card-label'));

    cb_labels.map(function (el) {
      var target = evt.target;
      target.parentElement.classList.contains('checkbox-card-label') ? target = target.parentElement : !!target.parentElement.parentElement && target.parentElement.parentElement.classList.contains('checkbox-card-label') ? target = target.parentElement.parentElement : '';

      if (target === el) {
        if (!target.classList.contains('disabled')) {
          if (target.control.checked) {
            target.classList.add('checked');
          } else {
            target.classList.remove('checked');
          }
        }
      }
    });
  });
  document.addEventListener('keydown', function (evt) {
    var cb_labels = _toConsumableArray(document.querySelectorAll('label.checkbox-card-label, label.checkbox-label'));

    cb_labels.map(function (el) {
      var target = evt.target;
      target.parentElement.classList.contains('checkbox-card-label') ? target = target.parentElement : !!target.parentElement.parentElement && target.parentElement.parentElement.classList.contains('checkbox-card-label') ? target = target.parentElement.parentElement : '';

      if (el === target) {
        var key = evt.which.toString();

        if (key.match(/32|13/)) {
          evt.preventDefault();
          target.click();
        }
      }
    });
  });
});

},{}],5:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

window.addEventListener('load', function () {
  var boolStrMap = {};
  var megamenuButtons = document.querySelectorAll('.accordion-button.nav-link');

  if (megamenuButtons) {
    _toConsumableArray(megamenuButtons).map(function (elm) {
      var submenu = elm.nextElementSibling;
      elm.addEventListener('click', function (evt) {
        evt.preventDefault();
        var elmExpanded = elm.getAttribute('aria-expanded');
        var submenuHidden = submenu.getAttribute('aria-hidden');
        elm.classList.toggle('submenu-item-active');

        if (elmExpanded == 'false') {
          elm.setAttribute('aria-expanded', 'true');
          submenu.setAttribute('aria-hidden', 'false');
        } else {
          elm.setAttribute('aria-expanded', 'false');
          submenu.setAttribute('aria-hidden', 'true');
        }
      });
    });
  }

  var submenuItems = document.querySelectorAll('.nav-submenu > .has-submenu');

  if (submenuItems) {
    _toConsumableArray(submenuItems).map(function (elm) {
      elm.addEventListener('click', function (evt) {
        evt.preventDefault();

        _toConsumableArray(submenuItems).map(function (elm2) {
          elm2.classList.remove('submenu-item-active');
        });

        elm.classList.toggle('submenu-item-active');
      });
    });
  }

  var govBannerButton = document.querySelector('button.usa-accordion-button.usa-banner-button');

  if (govBannerButton) {
    govBannerButton.addEventListener('click', function (evt) {
      var ariaVal = govBannerButton.getAttribute('aria-expanded');
      var banner = document.querySelector('#usa-gov-web-banner #gov-banner');
      var newVal = ariaVal === 'true' ? 'false' : 'true';
      var hideContainer = newVal === 'false' ? 'true' : 'false';
      govBannerButton.setAttribute('aria-expanded', newVal);
      banner.setAttribute('aria-hidden', hideContainer);
    });
  }
});

},{}],6:[function(require,module,exports){
"use strict";

window.addEventListener('load', function () {
  document.addEventListener('click', function (event) {
    var helper = function helper(element, className) {
      if (!!element) {
        if (element.classList.contains(className)) {
          return element;
        } else {
          return helper(element.parentElement, className);
        }
      }
    }; // create the mobile menu...


    if (document.querySelector('.mobile-menu-button') == event.target) {
      var mobileNav = document.querySelector('.mobile-primary-nav');
      var navBar = document.querySelector('.primary-nav');
      var navContainer = document.querySelector('.nav-container');
      var navBarClone = navBar.cloneNode(true);
      var mobileNavHeader = document.createElement('div');
      var mobileNavFooter = document.createElement('div');
      var closeSpan = document.createElement('span');
      var backButton = document.createElement('div');
      var menuSlider = document.createElement('div');
      var utilityNav = document.querySelector('.header-inner-wrap .utility-nav').cloneNode(true);
      var calloutBtn = document.querySelector('.header-inner-wrap .callout-button').cloneNode(true);
      var searchField = document.querySelector('#search-field').cloneNode(true);
      backButton.innerText = 'Back';
      backButton.classList.add('mobile-menu-back');
      menuSlider.classList.add('menus-silder-container');
      closeSpan.classList.add('mobile-menu-close');
      mobileNavHeader.classList.add('mobile-nav-header');
      mobileNavHeader.appendChild(closeSpan);
      mobileNavHeader.appendChild(backButton);
      mobileNavHeader.appendChild(searchField);
      backButton.style.display = "none";
      document.body.classList.toggle('mobile-menu-active');
      mobileNav.style.display = "flex";
      navContainer.appendChild(mobileNavHeader);
      menuSlider.appendChild(navBarClone);
      navContainer.appendChild(menuSlider);
      mobileNavFooter.classList.add('mobile-nav-footer');
      mobileNavFooter.appendChild(calloutBtn);
      mobileNavFooter.appendChild(utilityNav);
      navContainer.appendChild(mobileNavFooter);
    }

    var mobileNavContainerClicked = helper(event.target, "nav-container");
    var mobileNavItemClicked = helper(event.target, "nav-link");
    var mobileNavContainer = document.querySelector('.menus-silder-container');
    var submenuHasSubmenu = helper(event.target, "has-submenu");

    if (mobileNavItemClicked) {
      if (mobileNavItemClicked.classList.contains('accordion-button')) {
        event.preventDefault();
        event.stopPropagation();
        var mobileSubmenu = mobileNavItemClicked.parentElement.querySelector('.nav-submenu').cloneNode(true);
        var emptyNavDiv = document.createElement('div');
        emptyNavDiv.appendChild(mobileSubmenu);
        mobileNavContainer.appendChild(emptyNavDiv);
        mobileNavContainer.classList.toggle('level-2');
        document.querySelector('.mobile-nav-header > .mobile-menu-back').style.display = "flex";
        document.querySelector('.mobile-nav-header > #search-field').style.display = "none";
        document.querySelector('.mobile-nav-footer').style.display = "none";
      }
    }

    if (event.target.classList.contains('mobile-primary-nav') || event.target.classList.contains('mobile-menu-close')) {
      document.body.classList.toggle('mobile-menu-active');
      document.querySelector('.mobile-primary-nav').style.display = "none";
      document.querySelector('.nav-container').innerHTML = "";
    }

    if (event.target.classList.contains('mobile-menu-back')) {
      event.preventDefault();
      event.stopPropagation();
      var lowestLevel = mobileNavContainer.lastChild;

      if (mobileNavContainer.classList.contains('level-3')) {
        mobileNavContainer.classList.remove('level-3');
      } else {
        mobileNavContainer.classList.remove('level-2');
        document.querySelector('.mobile-menu-back').style.display = "none";
        document.querySelector('.mobile-nav-header > #search-field').style.display = "flex";
        document.querySelector('.mobile-nav-footer').style.display = "block";
      }

      setTimeout(function () {
        mobileNavContainer.removeChild(lowestLevel);
      }, 50);
    }

    if (submenuHasSubmenu) {
      event.preventDefault();
      event.stopPropagation();
      var subSubmenu = submenuHasSubmenu.querySelector('.nav-submenu-submenu').cloneNode(true);

      var _emptyNavDiv = document.createElement('div');

      _emptyNavDiv.appendChild(subSubmenu);

      mobileNavContainer.appendChild(_emptyNavDiv);
      mobileNavContainer.classList.toggle('level-3');
    }
  });
});

},{}],7:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

window.addEventListener('load', function () {
  document.addEventListener('click', function (evt) {
    var radio_labels = _toConsumableArray(document.querySelectorAll('label.radio-card-label'));

    radio_labels.map(function (el) {
      var target = evt.target;
      target.parentElement.classList.contains('radio-card-label') ? target = target.parentElement : !!target.parentElement.parentElement && target.parentElement.parentElement.classList.contains('radio-card-label') ? target = target.parentElement.parentElement : '';

      if (target === el) {
        if (el.classList.contains('disabled')) {
          el.control.disabled = true;
        }

        el.querySelector('.radio-card-input').addEventListener('change', function (evt) {
          var radio_name = evt.target.name;

          var rel_radios = _toConsumableArray(document.querySelectorAll("input.radio-card-input[name=".concat(radio_name, "]")));

          rel_radios.map(function (item) {
            _toConsumableArray(item.labels).map(function (label) {
              if (item.checked) {
                label.classList.add('checked');
              } else {
                label.classList.remove('checked');
              }
            });
          });
        });
      }
    });
  });
  document.addEventListener('keydown', function (evt) {
    var radio_labels = _toConsumableArray(document.querySelectorAll('label.radio-card-label'));

    radio_labels.map(function (el) {
      var target = evt.target;
      target.parentElement.classList.contains('radio-card-label') ? target = target.parentElement : !!target.parentElement.parentElement && target.parentElement.parentElement.classList.contains('radio-card-label') ? target = target.parentElement.parentElement : '';

      if (target === el) {
        var key = evt.which.toString();

        if (key.match(/32|13/)) {
          evt.preventDefault();
          el.click();
        }
      }
    });
  });
});

},{}],8:[function(require,module,exports){
"use strict";

require("./Components/accordion.js");

require("./Components/checkbox.js");

require("./Components/radio_buttons.js");

require("./Components/menu.js");

require("./Components/mobile_menu.js");

var _Stepper = _interopRequireDefault(require("./Components/Steppers/Vertical/Stepper.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

window.Stepper = _Stepper["default"];
window.is_iPad = navigator.userAgent.match(/iPad/i) != null;
window.is_mobile_device = false; //initialize as false
// device detection

if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
  window.is_mobile_device = true;
}

},{"./Components/Steppers/Vertical/Stepper.js":2,"./Components/accordion.js":3,"./Components/checkbox.js":4,"./Components/menu.js":5,"./Components/mobile_menu.js":6,"./Components/radio_buttons.js":7}]},{},[8]);

//# sourceMappingURL=farmers.min.js.map
